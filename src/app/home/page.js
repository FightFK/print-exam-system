"use client";
import React, { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase'; 

export default function Page() {
    const [email, setEmail] = useState(null);
    const [exam, setExam] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [selectedExam, setSelectedExam] = useState(null);
    const [file, setFile] = useState(null);
    const [role, setRole] = useState('Teacher'); // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á role ‡πÄ‡∏õ‡πá‡∏ô Teacher
    const [loading, setLoading] = useState(true); // Loading state for fetching data

    useEffect(() => {
        const fetchUserRole = async () => {
            const { data: { session }, error: sessionError } = await supabase.auth.getSession();
            if (sessionError) {
                console.error('Error fetching session:', sessionError.message);
                return;
            }
            if (session) {
                const userEmail = session.user.email;
                const { data: userData, error } = await supabase
                    .from('users')
                    .select('role') // ‡∏î‡∏∂‡∏á role ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
                    .eq('email', userEmail)
                    .single();

                if (error) {
                    console.error('Error fetching user role:', error.message);
                } else if (userData) {
                    setRole(userData.role); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ role ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
                    setEmail(userEmail); // Set the user email
                    fetchExams(userEmail); // Fetch exams for the user
                }
            }
            setLoading(false); // Set loading to false after fetching data
        };

        fetchUserRole();
    }, []);

    const fetchExams = async (email) => {
        if (!email) {
            console.error('No email provided');
            return;
        }

        try {
            const response = await fetch('/api/exams/getOwnExam', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email }),
            });

            const data = await response.json();
            
            if (!response.ok) {
                console.error('Error fetching exams:', data.error || 'Unknown error');
                return;
            }

            setExam(data); 
        } catch (error) {
            console.error('Fetch error:', error);
        }
    };

    // Filter exams to show only those without an uploaded file
    const pendingExams = exam.filter(examItem => examItem.exam_link_file === null);

    return (
        <div className="bg-white shadow-md rounded-lg p-4 m-4">
            {loading ? (
                <p className="text-gray-700">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p> // Loading message
            ) : (
                role === 'Teacher' && (
                    <>
                        <h2 className="text-xl font-semibold mb-4 text-red-600">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö</h2>
                        {pendingExams.length > 0 ? (
                            pendingExams.map((examItem) => (
                                <div key={examItem.examid} className="bg-gray-100 rounded-lg p-4 mb-4 shadow-sm transition-transform transform hover:scale-105">
                                    <h3 className="text-lg font-semibold text-blue-600">‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤: {examItem.subjects?.Subid}</h3>
                                    <p className="text-gray-700">‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤: {examItem.subjects?.Subname || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤'}</p>
                                    <p className="text-gray-500">‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date(examItem.date).toLocaleString()}</p>
                                    <p className="text-red-500 mt-2">üî¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö!</p>
                                </div>
                            ))
                        ) : (
                            <p className="text-gray-700">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á</p>
                        )}
                    </>
                )
            )}
            { role === 'Admin' && (
              <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-20 rounded relative" role="alert">
                  <strong className="font-bold">Hello, Admin!</strong>
                  <span className="block sm:inline"> ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ User.</span>
             </div>
            )
            }
             { role === 'Tech' && (
              <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-20 rounded relative" role="alert">
                  <strong className="font-bold">Hello, Tech!</strong>
                  <span className="block sm:inline"> ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏£‡∏∂‡∏¢‡∏±‡∏á ? .</span>
             </div>
            )
            }
             { role === 'Officer' && (
             <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-20 rounded relative" role="alert">
                  <strong className="font-bold">Hello, Officer!</strong>
                  <span className="block sm:inline"> ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏•‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤.</span>
             </div>
            )
            }
             { role === 'Developer' && (
             <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-20 rounded relative" role="alert">
                  <strong className="font-bold">Hello, Developer!</strong>
                  <span className="block sm:inline"> ‡πÅ‡∏Å‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ö‡∏±‡∏Ñ‡∏ß‡∏ô‡πÑ‡∏õ </span>
             </div>
            )
            }
        </div>
    );
}
